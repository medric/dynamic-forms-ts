// vite.config.ts
import { defineConfig } from "file:///Users/paloit/Desktop/dynamic-forms-ts/examples/simple-form/node_modules/vite/dist/node/index.js";
import react from "file:///Users/paloit/Desktop/dynamic-forms-ts/examples/simple-form/node_modules/@vitejs/plugin-react/dist/index.mjs";
import tsconfigPaths from "file:///Users/paloit/Desktop/dynamic-forms-ts/examples/simple-form/node_modules/vite-tsconfig-paths/dist/index.js";

// ../../packages/plugins/vite-plugin-generate-form-schema.ts
import { writeFileSync, watch } from "fs";
import path from "path";

// ../../packages/core/dynamic-form.ts
import * as swc from "file:///Users/paloit/Desktop/dynamic-forms-ts/node_modules/@swc/core/index.js";

// ../../packages/core/utils.ts
function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function singularize(word) {
  const irregulars = {
    "children": "child",
    "men": "man",
    "women": "woman",
    "feet": "foot",
    "teeth": "tooth",
    "mice": "mouse",
    "geese": "goose",
    "people": "person"
  };
  if (irregulars[word.toLowerCase()]) {
    return irregulars[word.toLowerCase()];
  }
  if (word.endsWith("ies")) {
    return word.slice(0, -3) + "y";
  } else if (word.endsWith("ves")) {
    return word.slice(0, -3) + "f";
  } else if (word.endsWith("es")) {
    return word.slice(0, -2);
  } else if (word.endsWith("s") && word.length > 1 && !word.endsWith("ss")) {
    return word.slice(0, -1);
  }
  return word;
}
function compose(...fns) {
  return fns.reduce((f, g) => (...args) => f(g(...args)));
}

// ../../packages/core/dynamic-form.ts
var DynamicForm = class {
  constructor(config = { filename: "./schema.ts" }) {
    this.forms = {};
    this.enums = {};
    this.TsKeywordType = this.tsKeywordTypeToForm.bind(this);
    this.TsArrayType = this.tsArrayTypeToForm.bind(this);
    this.TsTypeReference = this.tsTypeReferenceToForm.bind(this);
    this.config = config;
  }
  tsKeywordTypeToForm(type) {
    return { type: type.kind };
  }
  tsArrayTypeToForm(type, propertyName = "") {
    const elementType = type.elemType.type;
    let formType = "unknown";
    if (elementType === "TsTypeReference") {
      formType = this.tsTypeReferenceToForm(type.elemType).type;
    }
    if (elementType === "TsKeywordType") {
      formType = `${this.tsKeywordTypeToForm(type.elemType)}`;
    }
    if (elementType === "TsArrayType") {
      formType = this.tsArrayTypeToForm(type.elemType);
    }
    if (elementType === "TsTypeLiteral") {
      const norm = compose(capitalizeFirstLetter, singularize);
      const inferredName = norm(propertyName) ?? `Inferred${Object.keys(this.forms).length}`;
      const form = this.tsLiteralTypeToForm(type.elemType);
      this.forms[inferredName] = form;
      formType = inferredName;
    }
    return { type: "array", ref: formType };
  }
  tsTypeReferenceToForm(type) {
    if (type.typeName.type !== "Identifier") {
      return { type: "unknown" };
    }
    const isEnum = this.enums[type.typeName.value] !== void 0;
    if (isEnum) {
      return { type: "enum", ref: type.typeName.value };
    }
    return { type: "object", ref: type.typeName.type };
  }
  tsLiteralTypeToForm(literal) {
    const record = {};
    literal.members.forEach((member) => {
      const struct = member.type === "TsPropertySignature" ? member : null;
      console.log(struct);
      if (!struct) {
        return;
      }
      const propertyName = struct.key.type === "Identifier" ? struct.key.value : null;
      if (!propertyName) {
        return;
      }
      if (!struct.typeAnnotation) {
        return;
      }
      const { typeAnnotation } = struct;
      if (!typeAnnotation) {
        return;
      }
      const getFormDefinition = this[typeAnnotation.typeAnnotation.type] ?? (() => null);
      const propertyType = getFormDefinition(typeAnnotation.typeAnnotation, propertyName);
      if (!propertyType) {
        return;
      }
      record[propertyName] = propertyType;
    });
    return record;
  }
  typeDeclarationToForm(typeDeclaration) {
    const formName = typeDeclaration.id.type === "Identifier" ? typeDeclaration.id.value : null;
    const isTypeLiteral = typeDeclaration.typeAnnotation.type === "TsTypeLiteral";
    if (!isTypeLiteral || !formName) {
      return {};
    }
    const literal = typeDeclaration.typeAnnotation;
    const form = this.tsLiteralTypeToForm(literal);
    this.forms[formName] = form;
  }
  parseEnum(enumDeclaration) {
    const enumName = enumDeclaration.id.type === "Identifier" ? enumDeclaration.id.value : null;
    if (!enumName) {
      return;
    }
    const enumValues = enumDeclaration.members.map((member) => {
      return member.id.type === "Identifier" ? member.id.value : null;
    }).filter((value) => value !== null);
    this.enums[enumName] = enumValues;
  }
  async parse() {
    const res = await swc.parseFile(this.config.filename, {
      // @todo: Add into config
      syntax: "typescript",
      target: "es2020"
    });
    const enums = res.body.filter((node) => node.type === "TsEnumDeclaration");
    enums.forEach((enumDeclaration) => {
      this.parseEnum(enumDeclaration);
    });
    const typesDeclarations = res.body.filter((node) => node.type === "TsTypeAliasDeclaration");
    if (!typesDeclarations) {
      throw new Error("No types declarations found");
    }
    typesDeclarations.forEach((typeDeclaration) => {
      this.typeDeclarationToForm(typeDeclaration);
    });
    return this.forms;
  }
  render() {
  }
};

// ../../packages/plugins/vite-plugin-generate-form-schema.ts
function generateFormSchemaPlugin() {
  return {
    name: "generate-form-schema-plugin",
    configureServer(server) {
      const fileToWatch = "path/to/config.json";
      watch(fileToWatch, () => {
        console.log(`${fileToWatch} has changed. Reloading...`);
        server.restart();
      });
    },
    // Hook into the Vite build process
    async buildStart() {
      const currentDir = process.cwd();
      console.log("Generating form schema...", currentDir);
      const tsSchemaPath = process.env.TS_SCHEMA_PATH ?? path.resolve(currentDir, "schema.ts");
      const dynamicForm = new DynamicForm({
        filename: tsSchemaPath
      });
      const data = await dynamicForm.parse();
      const filePath = path.resolve(
        currentDir,
        "public/generated-form-schema.json"
      );
      writeFileSync(filePath, JSON.stringify(data, null, 2), "utf-8");
      console.log(`Generated JSON file at: ${filePath}`);
    }
  };
}

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [tsconfigPaths(), react(), generateFormSchemaPlugin()]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
